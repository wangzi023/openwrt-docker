name: Build and Push OpenWrt ARM64 Docker Image

on:
  push:
    tags:
      - 'v*' # 推送 v 开头的标签时触发构建
  workflow_dispatch: # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest # 注意：如需原生ARM环境构建，可选用GitHub提供的ARM runner（如ubuntu-24.04-arm）以获得更好性能和兼容性。

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download OpenWrt 24.10.1 ARM64 rootfs
        run: |
          wget -O rootfs.tar.gz https://archive.openwrt.org/releases/24.10.1/targets/armsr/armv8/openwrt-24.10.1-armsr-armv8-generic-ext4-rootfs.img.gz
          # 验证文件完整性，例如检查SHA256（如果官网提供）
          # ... 可添加验证命令 ...

      - name: Extract and prepare rootfs
        run: |
          mkdir -p rootfs
          tar -xzf rootfs.tar.gz -C rootfs
          # 如果需要，可以在此处添加自定义脚本或文件到 rootfs/
          # 例如，拷贝一个自定义的启动脚本或网络配置
          # cp custom_files/* rootfs/
          # 重新打包为 Docker 需要的格式
          tar -cf openwrt-docker-image.tar -C rootfs .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # 使用Buildx可以更好地处理多平台构建，即使本例主要针对ARM64

      - name: Build Docker image
        run: |
          docker build --platform linux/arm64 -t ${{ secrets.DOCKERHUB_USERNAME }}/openwrt-24.10.1-arm64:latest -t ${{ secrets.DOCKERHUB_USERNAME }}/openwrt-24.10.1-arm64:${{ github.ref_name }} .
          # 明确指定平台为 linux/arm64
          # 如果希望包含日期标签，可以添加更多 -t 参数

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/openwrt-24.10.1-arm64:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/openwrt-24.10.1-arm64:${{ github.ref_name }}
